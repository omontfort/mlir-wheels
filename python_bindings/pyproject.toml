[tool.cibuildwheel]
environment = { PIP_FIND_LINKS = "wheelhouse https://github.com/omontfort/mlir-wheels/releases/expanded_assets/latest", PIP_NO_BUILD_ISOLATION = "false" }
build-verbosity = 3
before-all = [
    "rm -rf {project}/build",
    "rm -rf *egg*",
]
manylinux-aarch64-image = "manylinux_2_28"
manylinux-x86_64-image = "sameli/manylinux_2_28_x86_64_cuda_12.3"

[tool.cibuildwheel.linux]
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"
skip = ["*-manylinux_i686", "*-musllinux*"]
environment-pass = [
    "BUILD_CUDA",
    "BUILD_OPENMP",
    "BUILD_VULKAN",
    "CIBW_ARCHS",
    "CMAKE_ARGS",
    "CMAKE_GENERATOR",
    "HOST_CCACHE_DIR",
    "DATETIME",
    "LLVM_PROJECT_COMMIT",
    "MATRIX_OS",
    "MLIR_WHEEL_VERSION",
    "PIP_FIND_LINKS",
    "PIP_NO_BUILD_ISOLATION",
]
before-build = [
    "{project}/scripts/docker_prepare_ccache.sh",
#    "{project}/scripts/install_cuda.sh",
    "{project}/scripts/install_vulkan.sh",
    "pip install -r requirements.txt",
    "{project}/scripts/pip_install_mlir.sh",
]
repair-wheel-command = [
    'LD_LIBRARY_PATH=$(python -c "import mlir; print(mlir.__path__[0])")/lib auditwheel repair -w {dest_dir} {wheel} --exclude libcuda.so.1 --exclude libvulkan.so.1'
]

[tool.cibuildwheel.macos]
build = "cp310-* cp311-* cp312-*"
before-build = [
    "{project}/scripts/install_vulkan.sh",
    "pip install -r requirements.txt",
    "{project}/scripts/pip_install_mlir.sh",
]
repair-wheel-command = [
    'DYLD_FALLBACK_LIBRARY_PATH=$(python -c "import mlir; print(mlir.__path__[0])")/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}  --ignore-missing-dependencies'
]

[tool.cibuildwheel.windows]
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"
before-build = [
    "bash {project}\\scripts\\install_vulkan.sh",
    "pip install delvewheel",
    "pip install -r requirements.txt",
    "bash {project}\\scripts\\pip_install_mlir.sh",
]
#repair-wheel-command = 'delvewheel repair -v -w {dest_dir} {wheel} --no-dll mlirpythoncapi.dll'
